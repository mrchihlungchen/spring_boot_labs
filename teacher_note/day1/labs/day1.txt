課程開始

git --version

git config --global user.name "YOUR NAME"
git config --global user.email mark@uuu.com

cd c:\Users\Admin

more .gitconfig

java -version
javac -version
https://www.microsoft.com/openjdk
https://confluence.jetbrains.com/display/JBR/Release+notes+and+builds
https://aws.amazon.com/tw/corretto/?filtered-posts.sort-by=item.additionalFields.createdDate&filtered-posts.sort-order=desc

JBR
https://start.spring.io/
web
thy
jpa
h2
dev
act

git init
git status

-Xmx 2048m <--wrong, no space
-Xmx=2048m <--wrong, no equal
-Xmx2048 <-- wrong, 2K, not 2G
-Xmx2048m

http://localhost:8080/actuator

https://github.com/spring-projects/spring-boot

cd C:\Users\Admin\.gradle
cmd
notepad gradle.properties

# systemProp.http.proxyHost=proxy.xyz.com.tw
# systemProp.http.proxyPort=1234
# systemProp.https.proxyHost=proxy.xyz.com.tw
# systemProp.https.proxyPort=1234
org.gradle.jvmargs=-Xmx2048m -Xms2048m
org.gradle.parallel=true
org.gradle.daemon=true


https://github.com/

gradlew dependencies下午 01:16 2022/4/16


http://localhost:8080/actuator

https://chrome.google.com/webstore/category/extensions?hl=zh-TW

jsonviewer
https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=zh-TW

https://plugins.gradle.org/plugin/io.freefair.lombok

~~~~~~~~~~~~~~~~~
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>My first template</title>
</head>
<body>
<h1>my first template</h1>
<img src="/images/richart.png" />
</body>
</html>
~~~~~~~~~~~~~~~~~~~
https://code.visualstudio.com/
~~~~~~~~~~~~~~~~~~~~~~~~
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">

<head>
    <meta charset="UTF-8">
    <title>My first template</title>
</head>

<body>
    <h1>my first template</h1>
    <img th:src="@{/images/richart.png}" />
    <h2>my second image no template</h2>
    <img src="/images/richart.png"/>
</body>

</html>
server.servlet.context-path=/demo1
SERVER_SERVLET_CONTEXT_PATH=/demo3


gradlew bootJar
dir /w build\libs\demo1-0.0.1-SNAPSHOT.jar

java -jar build\libs\demo1-0.0.1-SNAPSHOT.jar

java -jar build\libs\demo1-0.0.1-SNAPSHOT.jar --server.servlet.context-path=/demo4

https://docs.spring.io/spring-boot/docs/2.1.8.RELEASE/reference/html/boot-features-external-config.html

https://github.com/

README.md
# Spring Boot course @ucom

## Last modified: 16-Apr-2022

## SpringBoot:2.6.6
## Gradle:7.4.1

```
gradlew bootJar
```

cd c:\temp_phw

git clone https://github.com/markho/taishin_spring_boot.git

token validate

@SpringBootApplication

https://docs.spring.io/spring-boot/docs/current/reference/html/features.html
~~~~~~~~~~~~~
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">

<head>
    <meta charset="UTF-8">
    <title>My first template</title>
</head>

<body>
    <h1>my first template</h1>
    <h3 th:text="${message}"></h3>
    <img th:src="@{/images/richart.png}" />
    <h2>my second image no template</h2>
    <img src="/images/richart.png"/>
</body>

</html>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package com.uuu.demo1;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class RootController {
    @GetMapping("/")
    public String home321(Model model) {
        model.addAttribute("message","Hi, I am Mark");
        return "home";
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package com.uuu.demo1;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class Test1 {
    @BeforeEach
    public void prepareData() {
        System.out.println("prepare some data..");
    }
    @AfterEach
    public void recordData() {
        System.out.println("record test result data..");
    }
    @Test
    public void doTestA() {
        System.out.println("do testA");
    }

    @Test
    public void doTestB() {
        System.out.println("do testB");
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package com.uuu.demo1;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
class Demo1ApplicationTests {
	private RootController rootController;
	@Test
	void contextLoads() {
		assertThat(rootController).isNotNull();
	}

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package com.uuu.demo1;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
class Demo1ApplicationTests {
	@Autowired
	private RootController rootController;
	@Test
	void contextLoads() {
		assertThat(rootController).isNotNull();
	}

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package com.uuu.demo1;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
@AutoConfigureMockMvc
public class Test2 {
    @Autowired
    private MockMvc mockMvc;
    @Test
    public void testNotNull() {
        assertThat(mockMvc).isNotNull();
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package com.uuu.demo1;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
@AutoConfigureMockMvc
public class Test2 {
    @Autowired
    private MockMvc mockMvc;
    @Test
    public void testNotNull() {
        assertThat(mockMvc).isNotNull();
    }
}
